
SerialBridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  000004a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000042c  000008d0  0002042c  2**2
                  ALLOC
  3 .stack        00002004  2000046c  00000910  0002042c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .debug_info   000045ec  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e1  00000000  00000000  00024a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ea  00000000  00000000  00024f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000080  00000000  00000000  00025064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000250e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001297c  00000000  00000000  00025134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001692  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00075b7b  00000000  00000000  00039142  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000278  00000000  00000000  000aecc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     p$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000042c 	.word	0x2000042c
  d4:	00000000 	.word	0x00000000
  d8:	000004a4 	.word	0x000004a4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000430 	.word	0x20000430
 108:	000004a4 	.word	0x000004a4
 10c:	000004a4 	.word	0x000004a4
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
 11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
 11e:	429a      	cmp	r2, r3
 120:	d009      	beq.n	136 <Reset_Handler+0x1e>
 122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
 124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
 126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 128:	6811      	ldr	r1, [r2, #0]
 12a:	6019      	str	r1, [r3, #0]
 12c:	3304      	adds	r3, #4
 12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
 132:	428b      	cmp	r3, r1
 134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
 138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
 13a:	2200      	movs	r2, #0
 13c:	601a      	str	r2, [r3, #0]
 13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
 142:	4293      	cmp	r3, r2
 144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
 148:	21ff      	movs	r1, #255	; 0xff
 14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
 14c:	438b      	bics	r3, r1
 14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 150:	39fd      	subs	r1, #253	; 0xfd
 152:	2390      	movs	r3, #144	; 0x90
 154:	005b      	lsls	r3, r3, #1
 156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
 158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
 15c:	78d3      	ldrb	r3, [r2, #3]
 15e:	2503      	movs	r5, #3
 160:	43ab      	bics	r3, r5
 162:	2402      	movs	r4, #2
 164:	4323      	orrs	r3, r4
 166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	270c      	movs	r7, #12
 16c:	43bb      	bics	r3, r7
 16e:	2608      	movs	r6, #8
 170:	4333      	orrs	r3, r6
 172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
 176:	7b98      	ldrb	r0, [r3, #14]
 178:	2230      	movs	r2, #48	; 0x30
 17a:	4390      	bics	r0, r2
 17c:	2220      	movs	r2, #32
 17e:	4310      	orrs	r0, r2
 180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 182:	7b99      	ldrb	r1, [r3, #14]
 184:	43b9      	bics	r1, r7
 186:	4331      	orrs	r1, r6
 188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18a:	7b9a      	ldrb	r2, [r3, #14]
 18c:	43aa      	bics	r2, r5
 18e:	4322      	orrs	r2, r4
 190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
 194:	6851      	ldr	r1, [r2, #4]
 196:	2380      	movs	r3, #128	; 0x80
 198:	430b      	orrs	r3, r1
 19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
 19e:	4798      	blx	r3
        main();
 1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
 1a2:	4798      	blx	r3
 1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
 1a6:	46c0      	nop			; (mov r8, r8)
 1a8:	000004a4 	.word	0x000004a4
 1ac:	20000000 	.word	0x20000000
 1b0:	2000042c 	.word	0x2000042c
 1b4:	2000042c 	.word	0x2000042c
 1b8:	2000046c 	.word	0x2000046c
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41005000 	.word	0x41005000
 1cc:	41004800 	.word	0x41004800
 1d0:	41004000 	.word	0x41004000
 1d4:	000002dd 	.word	0x000002dd
 1d8:	000002b5 	.word	0x000002b5

000001dc <UART3_Init>:

static unsigned char* ARRAY_PORT_PINCFG0 = (unsigned char* ) &REG_PORT_PINCFG0;
static unsigned char* ARRAY_PORT_PMUX0 = (unsigned char* ) &REG_PORT_PMUX0;

void UART3_Init(void){
	REG_PM_APBCMASK  |= 0x00000020; //enable APB clock
 1dc:	4a19      	ldr	r2, [pc, #100]	; (244 <UART3_Init+0x68>)
 1de:	6813      	ldr	r3, [r2, #0]
 1e0:	2120      	movs	r1, #32
 1e2:	430b      	orrs	r3, r1
 1e4:	6013      	str	r3, [r2, #0]
	REG_GCLK_CLKCTRL |= 0x4017;		//enable core clock
 1e6:	4a18      	ldr	r2, [pc, #96]	; (248 <UART3_Init+0x6c>)
 1e8:	8813      	ldrh	r3, [r2, #0]
 1ea:	4918      	ldr	r1, [pc, #96]	; (24c <UART3_Init+0x70>)
 1ec:	430b      	orrs	r3, r1
 1ee:	8013      	strh	r3, [r2, #0]
	REG_SERCOM3_USART_CTRLA |= 1;	//Reset SERCOM3
 1f0:	4a17      	ldr	r2, [pc, #92]	; (250 <UART3_Init+0x74>)
 1f2:	6813      	ldr	r3, [r2, #0]
 1f4:	2101      	movs	r1, #1
 1f6:	430b      	orrs	r3, r1
 1f8:	6013      	str	r3, [r2, #0]
	while ( REG_SERCOM3_USART_SYNCBUSY & BIT_TO_MASK32(0) );	//wait for reset do be completed
 1fa:	4b16      	ldr	r3, [pc, #88]	; (254 <UART3_Init+0x78>)
 1fc:	681b      	ldr	r3, [r3, #0]
 1fe:	07db      	lsls	r3, r3, #31
 200:	d4fb      	bmi.n	1fa <UART3_Init+0x1e>
	REG_SERCOM3_USART_CTRLA |= 0x40106004; // LSB first, no parity, PA22 TX, PA23 RX one stop bit, 8bit
 202:	4b13      	ldr	r3, [pc, #76]	; (250 <UART3_Init+0x74>)
 204:	6819      	ldr	r1, [r3, #0]
 206:	4a14      	ldr	r2, [pc, #80]	; (258 <UART3_Init+0x7c>)
 208:	430a      	orrs	r2, r1
 20a:	601a      	str	r2, [r3, #0]
	REG_SERCOM3_USART_CTRLB |= 0x00030000; //Enable Tx and Rx	
 20c:	4913      	ldr	r1, [pc, #76]	; (25c <UART3_Init+0x80>)
 20e:	6808      	ldr	r0, [r1, #0]
 210:	22c0      	movs	r2, #192	; 0xc0
 212:	0292      	lsls	r2, r2, #10
 214:	4302      	orrs	r2, r0
 216:	600a      	str	r2, [r1, #0]
	REG_SERCOM3_USART_BAUD = 13;		//1e6/8/9600 = 13.02
 218:	210d      	movs	r1, #13
 21a:	4a11      	ldr	r2, [pc, #68]	; (260 <UART3_Init+0x84>)
 21c:	8011      	strh	r1, [r2, #0]
	REG_SERCOM3_USART_CTRLA |= 2;	//enable SERCOM3
 21e:	681a      	ldr	r2, [r3, #0]
 220:	390b      	subs	r1, #11
 222:	430a      	orrs	r2, r1
 224:	601a      	str	r2, [r3, #0]
	while ( REG_SERCOM3_USART_SYNCBUSY & BIT_TO_MASK32(1) );	//wait for reset do be completed
 226:	4b0b      	ldr	r3, [pc, #44]	; (254 <UART3_Init+0x78>)
 228:	681b      	ldr	r3, [r3, #0]
 22a:	079b      	lsls	r3, r3, #30
 22c:	d4fb      	bmi.n	226 <UART3_Init+0x4a>
	
	ARRAY_PORT_PINCFG0 [22] = ARRAY_PORT_PINCFG0 [23] |=1;	//enable pin config
 22e:	4a0d      	ldr	r2, [pc, #52]	; (264 <UART3_Init+0x88>)
 230:	7dd3      	ldrb	r3, [r2, #23]
 232:	2101      	movs	r1, #1
 234:	430b      	orrs	r3, r1
 236:	b2db      	uxtb	r3, r3
 238:	75d3      	strb	r3, [r2, #23]
 23a:	7593      	strb	r3, [r2, #22]
	
	ARRAY_PORT_PMUX0[11] = 0x22;		// PA22 = TX PA23 = RX
 23c:	2222      	movs	r2, #34	; 0x22
 23e:	4b0a      	ldr	r3, [pc, #40]	; (268 <UART3_Init+0x8c>)
 240:	72da      	strb	r2, [r3, #11]
	
	return;
}
 242:	4770      	bx	lr
 244:	40000420 	.word	0x40000420
 248:	40000c02 	.word	0x40000c02
 24c:	00004017 	.word	0x00004017
 250:	42001400 	.word	0x42001400
 254:	4200141c 	.word	0x4200141c
 258:	40106004 	.word	0x40106004
 25c:	42001404 	.word	0x42001404
 260:	4200140c 	.word	0x4200140c
 264:	41004440 	.word	0x41004440
 268:	41004430 	.word	0x41004430

0000026c <UART3_Writechar>:

void UART3_Writechar(char data){
	while(! (REG_SERCOM3_USART_INTFLAG & BIT_TO_MASK32(0)) ); //wait for ready to send
 26c:	4b03      	ldr	r3, [pc, #12]	; (27c <UART3_Writechar+0x10>)
 26e:	781b      	ldrb	r3, [r3, #0]
 270:	07db      	lsls	r3, r3, #31
 272:	d5fb      	bpl.n	26c <UART3_Writechar>
	REG_SERCOM3_USART_DATA = data;
 274:	b280      	uxth	r0, r0
 276:	4b02      	ldr	r3, [pc, #8]	; (280 <UART3_Writechar+0x14>)
 278:	8018      	strh	r0, [r3, #0]
	return;
}
 27a:	4770      	bx	lr
 27c:	42001418 	.word	0x42001418
 280:	42001428 	.word	0x42001428

00000284 <UART3_Readchar>:

char UART3_Readchar (void){
	while(! (REG_SERCOM3_USART_INTFLAG & BIT_TO_MASK32(2)) ); //wait for ready to receive
 284:	4b03      	ldr	r3, [pc, #12]	; (294 <UART3_Readchar+0x10>)
 286:	781b      	ldrb	r3, [r3, #0]
 288:	075b      	lsls	r3, r3, #29
 28a:	d5fb      	bpl.n	284 <UART3_Readchar>
	return REG_SERCOM3_USART_DATA;
 28c:	4b02      	ldr	r3, [pc, #8]	; (298 <UART3_Readchar+0x14>)
 28e:	8818      	ldrh	r0, [r3, #0]
 290:	b2c0      	uxtb	r0, r0
 292:	4770      	bx	lr
 294:	42001418 	.word	0x42001418
 298:	42001428 	.word	0x42001428

0000029c <delayms>:
}


void delayms(int n){
	int i;
	for(; n>0 ; n--){
 29c:	e004      	b.n	2a8 <delayms+0xc>
		for(i=0; i<199 ; i++){
			__asm("nop");
 29e:	46c0      	nop			; (mov r8, r8)
		for(i=0; i<199 ; i++){
 2a0:	3301      	adds	r3, #1
 2a2:	2bc6      	cmp	r3, #198	; 0xc6
 2a4:	ddfb      	ble.n	29e <delayms+0x2>
	for(; n>0 ; n--){
 2a6:	3801      	subs	r0, #1
 2a8:	2800      	cmp	r0, #0
 2aa:	dd01      	ble.n	2b0 <delayms+0x14>
 2ac:	2300      	movs	r3, #0
 2ae:	e7f8      	b.n	2a2 <delayms+0x6>
		}
	}
	return;
 2b0:	4770      	bx	lr
	...

000002b4 <main>:
{
 2b4:	b510      	push	{r4, lr}
	UART3_Init();
 2b6:	4b05      	ldr	r3, [pc, #20]	; (2cc <main+0x18>)
 2b8:	4798      	blx	r3
		UART3_Writechar(UART3_Readchar());
 2ba:	4b05      	ldr	r3, [pc, #20]	; (2d0 <main+0x1c>)
 2bc:	4798      	blx	r3
 2be:	4b05      	ldr	r3, [pc, #20]	; (2d4 <main+0x20>)
 2c0:	4798      	blx	r3
		delayms(10);
 2c2:	200a      	movs	r0, #10
 2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <main+0x24>)
 2c6:	4798      	blx	r3
 2c8:	e7f7      	b.n	2ba <main+0x6>
 2ca:	46c0      	nop			; (mov r8, r8)
 2cc:	000001dd 	.word	0x000001dd
 2d0:	00000285 	.word	0x00000285
 2d4:	0000026d 	.word	0x0000026d
 2d8:	0000029d 	.word	0x0000029d

000002dc <__libc_init_array>:
 2dc:	b570      	push	{r4, r5, r6, lr}
 2de:	4e0d      	ldr	r6, [pc, #52]	; (314 <__libc_init_array+0x38>)
 2e0:	4d0d      	ldr	r5, [pc, #52]	; (318 <__libc_init_array+0x3c>)
 2e2:	2400      	movs	r4, #0
 2e4:	1bad      	subs	r5, r5, r6
 2e6:	10ad      	asrs	r5, r5, #2
 2e8:	d005      	beq.n	2f6 <__libc_init_array+0x1a>
 2ea:	00a3      	lsls	r3, r4, #2
 2ec:	58f3      	ldr	r3, [r6, r3]
 2ee:	3401      	adds	r4, #1
 2f0:	4798      	blx	r3
 2f2:	42a5      	cmp	r5, r4
 2f4:	d1f9      	bne.n	2ea <__libc_init_array+0xe>
 2f6:	f000 f8c3 	bl	480 <_init>
 2fa:	4e08      	ldr	r6, [pc, #32]	; (31c <__libc_init_array+0x40>)
 2fc:	4d08      	ldr	r5, [pc, #32]	; (320 <__libc_init_array+0x44>)
 2fe:	2400      	movs	r4, #0
 300:	1bad      	subs	r5, r5, r6
 302:	10ad      	asrs	r5, r5, #2
 304:	d005      	beq.n	312 <__libc_init_array+0x36>
 306:	00a3      	lsls	r3, r4, #2
 308:	58f3      	ldr	r3, [r6, r3]
 30a:	3401      	adds	r4, #1
 30c:	4798      	blx	r3
 30e:	42a5      	cmp	r5, r4
 310:	d1f9      	bne.n	306 <__libc_init_array+0x2a>
 312:	bd70      	pop	{r4, r5, r6, pc}
 314:	0000048c 	.word	0x0000048c
 318:	0000048c 	.word	0x0000048c
 31c:	0000048c 	.word	0x0000048c
 320:	00000494 	.word	0x00000494

00000324 <register_fini>:
 324:	4b03      	ldr	r3, [pc, #12]	; (334 <register_fini+0x10>)
 326:	b510      	push	{r4, lr}
 328:	2b00      	cmp	r3, #0
 32a:	d002      	beq.n	332 <register_fini+0xe>
 32c:	4802      	ldr	r0, [pc, #8]	; (338 <register_fini+0x14>)
 32e:	f000 f805 	bl	33c <atexit>
 332:	bd10      	pop	{r4, pc}
 334:	00000000 	.word	0x00000000
 338:	0000034d 	.word	0x0000034d

0000033c <atexit>:
 33c:	b510      	push	{r4, lr}
 33e:	0001      	movs	r1, r0
 340:	2300      	movs	r3, #0
 342:	2200      	movs	r2, #0
 344:	2000      	movs	r0, #0
 346:	f000 f81f 	bl	388 <__register_exitproc>
 34a:	bd10      	pop	{r4, pc}

0000034c <__libc_fini_array>:
 34c:	b570      	push	{r4, r5, r6, lr}
 34e:	4b09      	ldr	r3, [pc, #36]	; (374 <__libc_fini_array+0x28>)
 350:	4c09      	ldr	r4, [pc, #36]	; (378 <__libc_fini_array+0x2c>)
 352:	1ae4      	subs	r4, r4, r3
 354:	10a4      	asrs	r4, r4, #2
 356:	d009      	beq.n	36c <__libc_fini_array+0x20>
 358:	4a08      	ldr	r2, [pc, #32]	; (37c <__libc_fini_array+0x30>)
 35a:	18a5      	adds	r5, r4, r2
 35c:	00ad      	lsls	r5, r5, #2
 35e:	18ed      	adds	r5, r5, r3
 360:	682b      	ldr	r3, [r5, #0]
 362:	3c01      	subs	r4, #1
 364:	4798      	blx	r3
 366:	3d04      	subs	r5, #4
 368:	2c00      	cmp	r4, #0
 36a:	d1f9      	bne.n	360 <__libc_fini_array+0x14>
 36c:	f000 f892 	bl	494 <_fini>
 370:	bd70      	pop	{r4, r5, r6, pc}
 372:	46c0      	nop			; (mov r8, r8)
 374:	000004a0 	.word	0x000004a0
 378:	000004a4 	.word	0x000004a4
 37c:	3fffffff 	.word	0x3fffffff

00000380 <__retarget_lock_acquire_recursive>:
 380:	4770      	bx	lr
 382:	46c0      	nop			; (mov r8, r8)

00000384 <__retarget_lock_release_recursive>:
 384:	4770      	bx	lr
 386:	46c0      	nop			; (mov r8, r8)

00000388 <__register_exitproc>:
 388:	b5f0      	push	{r4, r5, r6, r7, lr}
 38a:	464e      	mov	r6, r9
 38c:	4645      	mov	r5, r8
 38e:	46de      	mov	lr, fp
 390:	4657      	mov	r7, sl
 392:	b5e0      	push	{r5, r6, r7, lr}
 394:	4d36      	ldr	r5, [pc, #216]	; (470 <__register_exitproc+0xe8>)
 396:	b083      	sub	sp, #12
 398:	0006      	movs	r6, r0
 39a:	6828      	ldr	r0, [r5, #0]
 39c:	4698      	mov	r8, r3
 39e:	000f      	movs	r7, r1
 3a0:	4691      	mov	r9, r2
 3a2:	f7ff ffed 	bl	380 <__retarget_lock_acquire_recursive>
 3a6:	4b33      	ldr	r3, [pc, #204]	; (474 <__register_exitproc+0xec>)
 3a8:	681c      	ldr	r4, [r3, #0]
 3aa:	23a4      	movs	r3, #164	; 0xa4
 3ac:	005b      	lsls	r3, r3, #1
 3ae:	58e0      	ldr	r0, [r4, r3]
 3b0:	2800      	cmp	r0, #0
 3b2:	d052      	beq.n	45a <__register_exitproc+0xd2>
 3b4:	6843      	ldr	r3, [r0, #4]
 3b6:	2b1f      	cmp	r3, #31
 3b8:	dc13      	bgt.n	3e2 <__register_exitproc+0x5a>
 3ba:	1c5a      	adds	r2, r3, #1
 3bc:	9201      	str	r2, [sp, #4]
 3be:	2e00      	cmp	r6, #0
 3c0:	d128      	bne.n	414 <__register_exitproc+0x8c>
 3c2:	9a01      	ldr	r2, [sp, #4]
 3c4:	3302      	adds	r3, #2
 3c6:	009b      	lsls	r3, r3, #2
 3c8:	6042      	str	r2, [r0, #4]
 3ca:	501f      	str	r7, [r3, r0]
 3cc:	6828      	ldr	r0, [r5, #0]
 3ce:	f7ff ffd9 	bl	384 <__retarget_lock_release_recursive>
 3d2:	2000      	movs	r0, #0
 3d4:	b003      	add	sp, #12
 3d6:	bc3c      	pop	{r2, r3, r4, r5}
 3d8:	4690      	mov	r8, r2
 3da:	4699      	mov	r9, r3
 3dc:	46a2      	mov	sl, r4
 3de:	46ab      	mov	fp, r5
 3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 3e2:	4b25      	ldr	r3, [pc, #148]	; (478 <__register_exitproc+0xf0>)
 3e4:	2b00      	cmp	r3, #0
 3e6:	d03d      	beq.n	464 <__register_exitproc+0xdc>
 3e8:	20c8      	movs	r0, #200	; 0xc8
 3ea:	0040      	lsls	r0, r0, #1
 3ec:	e000      	b.n	3f0 <__register_exitproc+0x68>
 3ee:	bf00      	nop
 3f0:	2800      	cmp	r0, #0
 3f2:	d037      	beq.n	464 <__register_exitproc+0xdc>
 3f4:	22a4      	movs	r2, #164	; 0xa4
 3f6:	2300      	movs	r3, #0
 3f8:	0052      	lsls	r2, r2, #1
 3fa:	58a1      	ldr	r1, [r4, r2]
 3fc:	6043      	str	r3, [r0, #4]
 3fe:	6001      	str	r1, [r0, #0]
 400:	50a0      	str	r0, [r4, r2]
 402:	3240      	adds	r2, #64	; 0x40
 404:	5083      	str	r3, [r0, r2]
 406:	3204      	adds	r2, #4
 408:	5083      	str	r3, [r0, r2]
 40a:	3301      	adds	r3, #1
 40c:	9301      	str	r3, [sp, #4]
 40e:	2300      	movs	r3, #0
 410:	2e00      	cmp	r6, #0
 412:	d0d6      	beq.n	3c2 <__register_exitproc+0x3a>
 414:	009a      	lsls	r2, r3, #2
 416:	4692      	mov	sl, r2
 418:	4482      	add	sl, r0
 41a:	464a      	mov	r2, r9
 41c:	2188      	movs	r1, #136	; 0x88
 41e:	4654      	mov	r4, sl
 420:	5062      	str	r2, [r4, r1]
 422:	22c4      	movs	r2, #196	; 0xc4
 424:	0052      	lsls	r2, r2, #1
 426:	4691      	mov	r9, r2
 428:	4481      	add	r9, r0
 42a:	464a      	mov	r2, r9
 42c:	3987      	subs	r1, #135	; 0x87
 42e:	4099      	lsls	r1, r3
 430:	6812      	ldr	r2, [r2, #0]
 432:	468b      	mov	fp, r1
 434:	430a      	orrs	r2, r1
 436:	4694      	mov	ip, r2
 438:	464a      	mov	r2, r9
 43a:	4661      	mov	r1, ip
 43c:	6011      	str	r1, [r2, #0]
 43e:	2284      	movs	r2, #132	; 0x84
 440:	4641      	mov	r1, r8
 442:	0052      	lsls	r2, r2, #1
 444:	50a1      	str	r1, [r4, r2]
 446:	2e02      	cmp	r6, #2
 448:	d1bb      	bne.n	3c2 <__register_exitproc+0x3a>
 44a:	0002      	movs	r2, r0
 44c:	465c      	mov	r4, fp
 44e:	328d      	adds	r2, #141	; 0x8d
 450:	32ff      	adds	r2, #255	; 0xff
 452:	6811      	ldr	r1, [r2, #0]
 454:	430c      	orrs	r4, r1
 456:	6014      	str	r4, [r2, #0]
 458:	e7b3      	b.n	3c2 <__register_exitproc+0x3a>
 45a:	0020      	movs	r0, r4
 45c:	304d      	adds	r0, #77	; 0x4d
 45e:	30ff      	adds	r0, #255	; 0xff
 460:	50e0      	str	r0, [r4, r3]
 462:	e7a7      	b.n	3b4 <__register_exitproc+0x2c>
 464:	6828      	ldr	r0, [r5, #0]
 466:	f7ff ff8d 	bl	384 <__retarget_lock_release_recursive>
 46a:	2001      	movs	r0, #1
 46c:	4240      	negs	r0, r0
 46e:	e7b1      	b.n	3d4 <__register_exitproc+0x4c>
 470:	20000428 	.word	0x20000428
 474:	0000047c 	.word	0x0000047c
 478:	00000000 	.word	0x00000000

0000047c <_global_impure_ptr>:
 47c:	20000000                                ... 

00000480 <_init>:
 480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 482:	46c0      	nop			; (mov r8, r8)
 484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 486:	bc08      	pop	{r3}
 488:	469e      	mov	lr, r3
 48a:	4770      	bx	lr

0000048c <__init_array_start>:
 48c:	00000325 	.word	0x00000325

00000490 <__frame_dummy_init_array_entry>:
 490:	000000dd                                ....

00000494 <_fini>:
 494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 496:	46c0      	nop			; (mov r8, r8)
 498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 49a:	bc08      	pop	{r3}
 49c:	469e      	mov	lr, r3
 49e:	4770      	bx	lr

000004a0 <__fini_array_start>:
 4a0:	000000b5 	.word	0x000000b5
